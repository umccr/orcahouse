
input TableAWSDateFilterInput {
  ne: AWSDate
  eq: AWSDate
  le: AWSDate
  lt: AWSDate
  ge: AWSDate
  gt: AWSDate
  between: [AWSDate]
  attributeExists: Boolean
}

input TableFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
}

input TableStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  size: ModelSizeInput
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input TableIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
}

enum ModelSortDirection {
  ASC
  DESC
}


type Lims {
  load_datetime: String
  sequencing_run_date: AWSDate
  sequencing_run_id: String
  library_id: String
  internal_subject_id: String
  external_subject_id: String
  sample_id: String
  external_sample_id: String
  experiment_id: String
  project_id: String
  owner_id: String
  workflow: String
  phenotype: String
  type: String
  assay: String
  quality: String
  source: String
  truseq_index: String
}

type LimsConnection {
  items: [Lims]
  totalCount: Int
}

input OrderByLimsInput {
  load_datetime: ModelSortDirection
  sequencing_run_id: ModelSortDirection
  library_id: ModelSortDirection
  internal_subject_id: ModelSortDirection
  external_subject_id: ModelSortDirection
  sample_id: ModelSortDirection
  external_sample_id: ModelSortDirection
  experiment_id: ModelSortDirection
  project_id: ModelSortDirection
  owner_id: ModelSortDirection
  workflow: ModelSortDirection
  phenotype: ModelSortDirection
  type: ModelSortDirection
  assay: ModelSortDirection
  quality: ModelSortDirection
  source: ModelSortDirection
  truseq_index: ModelSortDirection
  sequencing_run_date: ModelSortDirection
}

input TableLimsFilterInput {
  load_datetime: TableStringFilterInput
  sequencing_run_id: TableStringFilterInput
  library_id: TableStringFilterInput
  internal_subject_id: TableStringFilterInput
  external_subject_id: TableStringFilterInput
  sample_id: TableStringFilterInput
  external_sample_id: TableStringFilterInput
  experiment_id: TableStringFilterInput
  project_id: TableStringFilterInput
  owner_id: TableStringFilterInput
  workflow: TableStringFilterInput
  phenotype: TableStringFilterInput
  type: TableStringFilterInput
  assay: TableStringFilterInput
  quality: TableStringFilterInput
  source: TableStringFilterInput
  truseq_index: TableStringFilterInput
  sequencing_run_date: TableAWSDateFilterInput

  and: [TableLimsFilterInput]
  or: [TableLimsFilterInput]
  not: [TableLimsFilterInput]
}

type Query {
  listLims(
    filter: TableLimsFilterInput
    limit: Int
    orderBy: [OrderByLimsInput]
    offset: Int
  ): LimsConnection
}